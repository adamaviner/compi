%{
	#include "hw4.h"
	#include "bp.hpp"
	#include <iostream>
	#include <stdlib.h>
	#include <string>
	#include <sstream>
	#include "symbolTable.h"
	#include "output.hpp"

	#define YYERROR_VERBOSE 1 
	#define YYDEBUG 1 

	using namespace std;
	extern int yylex();
	extern int yylineno; 
	int yyerror(char * message);
	typedef enum { OP_AND, OP_OR } opType;
	SymbolTable sym;

	enum Arith {
	PLUS,MINUS,MULT,DIV};

	int whiles = 0;
	bool decScope = false;
	list<CaseCond> condList;

	void typeMis(int line);
	bool isInt(Type t);
	bool isTime(Type t);

	void errorMismatch();
	void errorBreak();
	void errorSyn();
	void errorLex();
	void errorUndef(string name);
	void errorDef(string name);


	void assertType(Type type, Type expected);
	void assertType(Type type, Type type2, Type expected);
	void assertTime(Type type);
	void assertAssignable(Type type, Type secondType);
	void assertComparable(Type type, Type secondType);
	Type calculateMultiply(Type type, Type secondType);
	Type calculateDiv(Type type, Type secondType);
	void doIO(string name);
	void addVariable(string name, Type type);
	string addTempVar(Type type);
	string addTempVar(Type type, string val);
	Type getType(string name);
	string convertInt(int number);

	void convert(Type from, string name, Type to);
	void convert(YYSTYPE var, Type type);
	string s(string i);
	string offset(string var_c);

	string emitArith(YYSTYPE first, Arith op, YYSTYPE second);
	string emitOp(YYSTYPE first, string op, YYSTYPE second);
	string emitMult(YYSTYPE first, YYSTYPE second);
	string emitDiv(YYSTYPE first, YYSTYPE second);

	YYSTYPE initListBool(YYSTYPE E,string boolVal);
	YYSTYPE reverseLists(YYSTYPE p);
	YYSTYPE emitRop(string left_c, string op_c, string right_c);
	YYSTYPE emitCompRop (string first_c, char rop, string second_c);
%}

%token ';' INPUT BREAK CASE SWITCH PRINT IF WHILE ERROR
%token IDEN STR NUM SEC MIN HR D W BOOLEAN_VALUE BOOLEAN INTEGER
%right '='
%left OR
%left AND
%left EQUALS NEQ
%left GE LE '<' '>'
%left '+' '-'
%left '*' '/'
%nonassoc NOT
%left '(' ')' '{' '}'
%nonassoc ELSE 



%%

P			: {sym.startScope();} Statments {bp($2.nextList, next());printBuffer(); sym.endScope();}
			;

Statments	: Statments M Statment {bp($1.nextList,$2.quad); $$=$3; $$.breakList=merge($1.breakList,$3.breakList);}
			| Statment {$$=$1; }
			;

Statment 	: '{' {sym.startScope();decScope=false;} Statments '}' {sym.endScope(); $$=$2;}
			| Type IDEN ';'               {addVariable($2.text, $1.type); }
			| Type IDEN '=' Exp ';'       {assertAssignable($1.type,$4.type); addVariable($2.text, $1.type); 
				convert($4, $1.type);  emit(s($2.text) + '=' + s($4.text));}
			| IDEN '=' Exp ';'       {assertAssignable(getType($1.text),$3.type); convert($3, $1.type); 
				emit(s($1.text) + '=' + s($3.text));}
			| PRINT IDEN ';' 				{doIO($2.text); emit("print " + s($2.text));}
			| PRINT STR ';' 			    {emit("print " + $2.text);}
			| INPUT IDEN ';'				{doIO($2.text); emit("input " + s($2.text));}
			| IF '(' Exp ')' M DecStatment	{assertType($3.type, BOOL); 
				bp($3.trueList, $5.quad);
				 $$.nextList=merge($3.falseList,$6.nextList);
				 $$.breakList=$6.breakList;
				}
			| IF '(' Exp ')' M DecStatment ELSE N M DecStatment 
			{
				assertType($3.type, BOOL);
				bp($3.trueList,$5.quad); 
				bp($3.falseList,$9.quad); 
				$$.nextList=merge(merge($8.nextList,$6.nextList),$10.nextList);
				$$.breakList=merge($6.breakList,$10.breakList);
			}
			| M WHILE '(' Exp ')' {++whiles;  } M DecStatment N {
				assertType($4.type, BOOL); --whiles; 
				$$.nextList=merge(merge($4.falseList,$7.breakList), $8.nextList);
				bp($7.nextList,$1.quad);
				bp($4.trueList,$6.quad);
			}
			| BREAK ';' 		{if (whiles == 0) errorBreak(); $$.breakList=makelist(next()); emit("goto "); }
			| SWITCH '(' Exp ')' '{' CasesList '}' { //goto before and after
				assertTime($3.type); 
				while (!condList.empty()){
					CaseCond c= condList.front();
					condList.pop_front();
					string tempVar = addTempVar(c.type, c.val);
					convert(c.type, tempVar.c_str(), $3.type);
					emit("if " + s(tempVar.c_str()) + "==" + s($3.text) + " goto " + convertInt(c.quad));
				}

				// $$.nextList=merge($6.nextList, makelist(next()));
				// emit("goto ");
				}
			| ';' 			{errorSyn();}
			| ERROR 		{errorLex(); }
			;

DecStatment	: { decScope=true;} Statment { decScope=false; $$=$1;}

CasesList	: CaseStat  CasesList {$$.nextList= merge($1.nextList,$2.nextList);}
			| CaseStat {$$=$1;}
			;

CaseStat	: M CASE NUM TimeUnit ':' M DecStatment BREAK ';' {
				condList.push_back(CaseCond($3.text,$4.type, $6.quad)); $$.nextList = $7.nextList;
			}
			;

TimeUnit	: SEC 		{$$.type = SECOND;}
			| MIN 		{$$.type = MINUTE;}
			| HR 		{$$.type = HOUR;}
			| D 		{$$.type = DAY;}
			| W 		{$$.type = WEEK;}
			;

Type 		: TimeUnit 		{$$.type = $1.type;}
			| INTEGER 		{$$.type = INT;}
			| BOOLEAN 			{$$.type = BOOL;}
			;


Exp			: '(' Exp ')' 	{$$ = $2}
			| Exp '+' Exp 	{assertComparable($1.type, $3.type); $$.text = emitArith($1,PLUS,$3); $$.type=getType($$.text);}
			| Exp '-' Exp 	{assertComparable($1.type, $3.type); $$.text = emitArith($1,MINUS,$3); $$.type=getType($$.text);}
			| Exp '*' Exp 	{$$.text = emitArith($1,MULT,$3); $$.type=getType($$.text);}
			| Exp '/' Exp   {$$.text = emitArith($1,DIV,$3); $$.type=getType($$.text);}
			| IDEN 			 {$$.type = getType($1.text); $$.text=$1.text;}
			| NUM			 {$$.type = INT; $$.text = addTempVar(INT, $1.text);}
			| NUM TimeUnit	 {$$.type = $2.type; $$.text = addTempVar($2.type, $1.text);}
			| BOOLEAN_VALUE  {$$.type = BOOL; $$.text = addTempVar(BOOL, $1.text); $$=initListBool($$,$1.text); }
			| NOT Exp 		 {assertType($2.type, BOOL); $$ = $2; $$=reverseLists($$);}
			| Exp OR M Exp     {assertType($1.type, $3.type, BOOL); $$.type = BOOL; 
				bp($1.falseList, $3.quad);$$.trueList=merge($1.trueList,$4.trueList);$$.falseList=$4.falseList;}
			| Exp AND M Exp    {assertType($1.type, $3.type, BOOL); $$.type = BOOL;
				 $$.falseList=merge($1.falseList,$4.falseList); $$.trueList=$4.trueList; bp($1.trueList,$3.quad);}
			| Exp '<' Exp 	 {assertComparable($1.type, $3.type); $$.type = BOOL; $$=emitRop($1.text, "<", $3.text);}
			| Exp '>' Exp    {assertComparable($1.type, $3.type); $$.type = BOOL; $$=emitRop($1.text, ">", $3.text);}
			| Exp LE Exp   {assertComparable($1.type, $3.type); $$.type = BOOL; $$=emitCompRop($1.text, '<' , $3.text); }
			| Exp GE Exp   {assertComparable($1.type, $3.type); $$.type = BOOL; $$=emitCompRop($1.text, '>' , $3.text);}
			| Exp EQUALS Exp   {assertComparable($1.type, $3.type); $$.type = BOOL; $$=emitRop($1.text, "==", $3.text);}
			| Exp NEQ Exp   {assertComparable($1.type, $3.type); $$.type = BOOL; $$=emitRop($1.text, "!=", $3.text);}
			;


M 			: {$$.quad = next();}
			;

N 			: {$$.quad = next(); emit("goto "); $$.nextList=makelist($$.quad);}
			;

%%

main() { 
	yydebug = 0; 
	 yyparse(); 
}

int yyerror(char * s) { 
 	output::errorSyn(yylineno);
 	exit(1); 
 	return 0; 
} 

void typeCheck(Type t1, Type t2){
	if (t1!=t2){
	   output::errorMismatch(yylineno);
	   exit(1);
	}

}

bool isInt(Type t){
	return t==INT;
}

bool isTime(Type t){
	switch (t){
		case(MINUTE):
		case(SECOND):
		case(HOUR):
		case(DAY):
		case(WEEK): return true;
	}
	return false;
}

void assertTime(Type type){
	if (!isTime(type)) errorMismatch();
}

void assertType(Type type, Type expected){
	if (type != expected) errorMismatch();
}

void assertType(Type type, Type type2, Type expected){
	assertType(type, expected);
	assertType(type2, expected);
}


void assertAssignable(Type type, Type secondType){
	if (type == secondType) return;
	assertComparable(type,secondType);
}

void assertComparable(Type type, Type secondType){
	if (isInt(type)){
		if(!isInt(secondType)) errorMismatch();
		return;
	}
	if (isTime(type)){
		if (!isTime(secondType)) errorMismatch();
		return;
	}
	errorMismatch(); //TODO is this really a mismatch?
}

Type calculateMultiply(Type type, Type secondType){
	if (isTime(type)){
		if (isInt(secondType))
			return type;
		errorMismatch();
	}
	if (isInt(type)){
		if (isTime(secondType))
			return secondType;
		if (isInt(secondType))
			return INT;
	}
	errorMismatch();
	return INT;
}

Type calculateDiv(Type type, Type secondType){
	if (isInt(secondType)) 
		if (isInt(type) || isTime(type)) return type;
	if (isTime(type) && isTime(secondType)) return INT;
	errorMismatch();
	return INT;
}

string emitArith(YYSTYPE first, Arith op, YYSTYPE second){
	switch (op){
		case(PLUS): return emitOp(first,"+", second); 
		case(MINUS): return emitOp(first,"-", second); 
		case(MULT): return emitMult(first, second); 
		case(DIV): return emitDiv(first, second); 
	}
}

string emitOp(YYSTYPE first, string op, YYSTYPE second){
	string res = addTempVar(first.type);
	convert(second, first.type);
	emit(s(res) + "=" + s(first.text) + op + s(second.text));
	return res;
}

string emitMult(YYSTYPE first, YYSTYPE second){
	string res = addTempVar(calculateMultiply(first.type,second.type));
	emit(s(res) + '=' + s(first.text) + '*' + s(second.text));
	return res;
}

string emitDiv(YYSTYPE first, YYSTYPE second) {
	string res = addTempVar(calculateDiv(first.type, second.type));
	if (isTime(first.type) && isTime(second.type)) convert (second, first.type);
	emit(s(res) + '=' + s(first.text) + '/' + s(second.text));
	return res;

	
}

void convert(Type from, string name, Type to){
	if(from==to) return;
	if (from>to) 
		emit(s(name)+ "=" + s(name) + "*" + convertInt(from/to));

	else 
		emit(s(name)+ "=" + s(name) + "/" + convertInt(to/from));

}

void convert(YYSTYPE var, Type type){
	convert(var.type, var.text, type);
}



string s(string i){
	return "s[" + offset(i) + "]";
}

string offset(string var){
	return convertInt(sym.getOffset(var));
}

void doIO(string name){
	if (!sym.isDefined(name)) errorUndef(name);
	Type type = sym.getType(name);
	if(!isInt(type) && !isTime(type)) errorMismatch();
}

void addVariable(string name, Type type){
	if (decScope==true) sym.startScope();
	if (sym.addVariable(name, type) == false)
	errorDef(name);
	if (decScope==true) sym.endScope();
}

string addTempVar(Type type, string val){
				 string name = newTemp();
				 sym.addVariable(name, type); 
				 emit(s(name)+"="+val);
				 return name;
}

string addTempVar(Type type){
				 string name = newTemp();
				 sym.addVariable(name, type); 
				 return name;
}

Type getType(string name){
	if (!sym.isDefined(name)) errorUndef(name);
	return sym.getType(name);
}


string convertInt(int number){
   stringstream ss;
   ss << number;
   return ss.str();
}


void errorMismatch(){
	output::errorMismatch(yylineno);
	exit(1);
}

void errorBreak(){
	output::errorUnexpectedBreak(yylineno);
	exit(1);
}

void errorUndef(string name){
	output::errorUndef(yylineno, name.c_str());
	exit(1);
}

void errorDef(string name){
	output::errorDef(yylineno, name.c_str());
	exit(1);
}

void errorLex(){
	output::errorLex(yylineno);
	exit(1);
}

void errorSyn(){
	output::errorSyn(yylineno);
	exit(1);
}



YYSTYPE initListBool(YYSTYPE E,string boolVal){
	if (boolVal.compare("1") == 0) E.trueList=makelist(next());
	else E.falseList=makelist(next());
	emit("goto ");
	return E;
}

YYSTYPE reverseLists(YYSTYPE p){
	list<int> tempList = p.trueList;
	p.trueList=p.falseList;
	p.falseList=tempList;
	return p;
}

YYSTYPE emitRop(string left, string op, string right){
	YYSTYPE retVal;
	retVal.type = BOOL;
	retVal.trueList = makelist(next());
	emit("if " + s(left) + " " + op + " " + s(right) + " goto ");
	retVal.falseList = makelist(next());
	emit("goto ");
	return retVal;
}


YYSTYPE emitCompRop (string left, char rop, string right){
	YYSTYPE retVal;
	retVal.type = BOOL;
	retVal.trueList=makelist(next());
	emit("if " + s(left) + " "+ rop + " " + s(right) + " goto ");
	list<int> tempList = makelist(next());
	emit("if " + s(left) + " "+ "==" + " " + s(right) + " goto ");
	retVal.trueList=merge(retVal.trueList,tempList);
	retVal.falseList=makelist(next());
	emit("goto ");
	return retVal;
}
